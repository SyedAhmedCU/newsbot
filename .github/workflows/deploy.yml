name: CI/CD with Terraform
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
  PUBLIC_SSH_KEY: ${{ secrets.PUBLIC_SSH_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SERVER_PUBLIC_IP: ${{ secrets.SERVER_PUBLIC_IP }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
  PORT: ${{ secrets.PORT }}
  SUMMARIZED_NEWS_DATA_PREFIX: ${{ secrets.SUMMARIZED_NEWS_DATA_PREFIX }}
  FULL_NEWS_DATA_PREFIX: ${{ secrets.FULL_NEWS_DATA_PREFIX }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_STATE_BUCKET_NAME}" -backend-config="region=${AWS_REGION}"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |- 
          terraform plan \
          -var="aws_region=${AWS_REGION}" \
          -var="private_key=${PRIVATE_SSH_KEY}" \
          -var="public_key=${PUBLIC_SSH_KEY}" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR repository if it doesn't exist
        run: |-
          aws ecr describe-repositories --repository-names newsbot-backend || aws ecr create-repository --repository-name newsbot-backend
      - name: Build and push Docker image
        env: 
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: newsbot-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./backend
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: newsbot-backend
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ env.AWS_REGION }}

        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ec2-user
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: AWS_REGION, REGISTRY, REPOSITORY, IMAGE_TAG, PRIVATE_SSH_KEY, PUBLIC_SSH_KEY, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 
          script: |-
            sudo yum update -y
            sudo yum install -y docker
            sudo yum install -y aws-cli
            sudo yum install -y amazon-cloudwatch-agent
            sudo usermod -aG docker ec2-user
            sudo service docker start
            sudo systemctl enable docker
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $REGISTRY
            docker stop newsbot-backend || true
            docker rm newsbot-backend || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name newsbot-backend \
            --log-driver=awslogs \
            --log-opt awslogs-region=$AWS_REGION \
            --log-opt awslogs-group=/docker/newsbot-backend \
            --log-opt awslogs-stream=backend-logs \
            -p 3000:3000 \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_REGION=$AWS_REGION \
            -e GEMINI_API_KEY=$GEMINI_API_KEY \
            -e GEMINI_MODEL=$GEMINI_MODEL \
            -e SUMMARIZED_NEWS_DATA_PREFIX=$SUMMARIZED_NEWS_DATA_PREFIX \
            -e FULL_NEWS_DATA_PREFIX=$FULL_NEWS_DATA_PREFIX \
            -e PORT=$PORT \
            $REGISTRY/$REPOSITORY:$IMAGE_TAG